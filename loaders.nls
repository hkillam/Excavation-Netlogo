globals [
 ;; indicies for loaders.csv
 I-ID              ;;  0  - ID of the building
 I-Name            ;;  1
 I-X               ;;  2
 I-Y               ;;  3
 I-GROUP           ;;  4 
]

loaders-own [
  id
  group                  ;; which group is this machine part of
  material-initial       ;; initial quantity of material this loader needs to move
  remaining-material     ;;
  loading?               ;; is it currently loading a truck?
  scoops                 ;; number of scoops loaded into the current truck
  trucks-in-queue        ;; number of trucks waiting to be loaded by this loader
  current-truck          ;; which truck is it loading
  working                ;; ticks that the scoop needs to do the job.
  contaminated?
]


to init-loader-globals 
  set I-ID           0
  set I-Name         1
  set I-X            2
  set I-Y            3
  set I-GROUP        4
end


;
; reads the csv file, creates loaders
;
to read-loaderlist
    init-loader-globals
    let temp-loader-list csv:from-file "loaders.csv" 
    
    ;; remove headers from the data
    let firstrow item 0 temp-loader-list
    if item 0 firstrow = "machine" [ set temp-loader-list remove-item 0 temp-loader-list]
  
    let number-loaders 0
    let cont-number-loaders 0

    foreach temp-loader-list [
      row -> 

         create-loaders 1 [
             set id item I-ID row
             set group item I-GROUP row

             set shape "bulldozer top" 
             set size 2
             ifelse group = 1 [
                 set number-loaders number-loaders + 1
                 set contaminated? false
             ][
                 set cont-number-loaders cont-number-loaders + 1
                 set contaminated? true
             ]
             
             set current-truck -1
             set working time-scoop
             move-to patch item I-X row item I-Y row
      
         ]
    ]
  
    ask loaders [
      ifelse group = 1 [
         set color pink
         set material-initial total-volume-excavation / number-loaders
      ][set color green
         set material-initial cont-total-volume-excavation / cont-number-loaders
      ]
      set remaining-material material-initial
  ]
end


to scoop
  ifelse  working <= 0 [
    if current-truck != -1 [
      let scoop-size 0
       ask truck current-truck [
        ifelse contaminated? = false [
          set scoop-size random-normal volume-scoop volume-scoop-deviation
         set loaded  loaded + scoop-size
        ][
          set scoop-size random-normal cont-volume-scoop cont-volume-scoop-deviation
         set loaded  loaded + scoop-size
        ]
       ]
       set remaining-material remaining-material - scoop-size
       ifelse contaminated? = false [
          set working random-normal time-scoop time-scoop-deviation
       ][
          set working random-normal cont-time-scoop cont-time-scoop-deviation
       ]
    ]
  ][
    set working  working - 1
  ]
end